import os
from service import Service
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv('.env')
tg_bot = os.getenv('TG_TOKEN')
bot = telebot.TeleBot(tg_bot)

location_messages = {}
svc = Service()

def make_routes_keyboard(routes):
    """–§–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    markup = InlineKeyboardMarkup()
    for rid, full_name in routes.items():
        name = full_name.lstrip('"')
        label = name.split(':', 1)[0]
        btn = InlineKeyboardButton(text=label, callback_data=str(rid))
        markup.add(btn)
    return markup


def build_location_keyboard(route_id: int, idx: int, total: int, detail: bool = False) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    # 1) –ü–æ–¥—Ä–æ–±–Ω–µ–µ/–°–∫—Ä—ã—Ç—å
    if detail:
        kb.add(InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"loc_{route_id}_{idx}"))
    else:
        kb.add(InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"detail_{route_id}_{idx}"))
    # 2) –ù–∞–≤–∏–≥–∞—Ü–∏—è Prev/Next
    nav_buttons = []
    if idx > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"loc_{route_id}_{idx-1}"))
    if idx < total - 1:
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂", callback_data=f"loc_{route_id}_{idx+1}"))
    if nav_buttons:
        kb.row(*nav_buttons)
    # 3) –ú–µ–Ω—é
    kb.add(InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back"))
    return kb


@bot.message_handler(commands=['start'])
def start_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    routes = svc.get_routes_shortly()
    markup = make_routes_keyboard(routes)
    bot.send_message(chat_id=message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data
    chat_id = call.message.chat.id

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back":
        if chat_id in location_messages:
            bot.delete_message(chat_id=chat_id, message_id=location_messages[chat_id])
            del location_messages[chat_id]
        routes = svc.get_routes_shortly()
        markup = make_routes_keyboard(routes)
        bot.edit_message_text(chat_id=chat_id,
                              message_id=call.message.message_id,
                              text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
                              reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π (history) –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è
    if data.startswith("detail_"):
        _, r, i = data.split("_", 2)
        route_id, idx = int(r), int(i)
        route = svc.get_route(route_id)
        loc = route.locations[idx]
        text = f"<b>{loc.name}</b>\n\n" + (loc.history or "–ü–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç.")
        kb = build_location_keyboard(route_id, idx, len(route.locations), detail=True)
        bot.edit_message_text(chat_id=chat_id,
                              message_id=call.message.message_id,
                              text=text,
                              parse_mode="HTML",
                              reply_markup=kb)
        lat_str, lng_str = map(str.strip, loc.coords.split(",", 1))
        bot.edit_message_live_location(chat_id=chat_id,
                                       message_id=location_messages.get(chat_id),
                                       latitude=float(lat_str),
                                       longitude=float(lng_str))
        bot.answer_callback_query(call.id)
        return

    # –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–∫—Ä–∞—Ç–∫–æ)
    if data.startswith("start_"):
        route_id = int(data.split("_", 1)[1])
        route = svc.get_route(route_id)
        idx = 0
        loc = route.locations[idx]
        text = f"<b>{loc.name}</b>\n\n{loc.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}"
        kb = build_location_keyboard(route_id, idx, len(route.locations), detail=False)
        bot.edit_message_text(chat_id=chat_id,
                              message_id=call.message.message_id,
                              text=text,
                              parse_mode="HTML",
                              reply_markup=kb)
        lat_str, lng_str = map(str.strip, loc.coords.split(",", 1))
        loc_msg = bot.send_location(chat_id=chat_id,
                                     latitude=float(lat_str),
                                     longitude=float(lng_str),
                                     live_period=86400)
        location_messages[chat_id] = loc_msg.message_id
        bot.answer_callback_query(call.id)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏ (–∫—Ä–∞—Ç–∫–æ)
    if data.startswith("loc_"):
        _, r, i = data.split("_", 2)
        route_id, idx = int(r), int(i)
        route = svc.get_route(route_id)
        loc = route.locations[idx]
        text = f"<b>{loc.name}</b>\n\n{loc.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}"
        kb = build_location_keyboard(route_id, idx, len(route.locations), detail=False)
        bot.edit_message_text(chat_id=chat_id,
                              message_id=call.message.message_id,
                              text=text,
                              parse_mode="HTML",
                              reply_markup=kb)
        lat_str, lng_str = map(str.strip, loc.coords.split(",", 1))
        bot.edit_message_live_location(chat_id=chat_id,
                                       message_id=location_messages.get(chat_id),
                                       latitude=float(lat_str),
                                       longitude=float(lng_str))
        bot.answer_callback_query(call.id)
        return

    # –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ ID
    try:
        route_id = int(data)
    except ValueError:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    route = svc.get_route(route_id)
    if not route:
        bot.answer_callback_query(call.id, "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = route.description or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    if route.map_link:
        text += f"\n\nüó∫ <a href=\"{route.map_link}\">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É</a>"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"),
               InlineKeyboardButton("‚ñ∂ –ù–∞—á–∞—Ç—å", callback_data=f"start_{route_id}"))
    bot.edit_message_text(chat_id=chat_id,
                          message_id=call.message.message_id,
                          text=text,
                          parse_mode="HTML",
                          disable_web_page_preview=False,
                          reply_markup=markup)
    bot.answer_callback_query(call.id)


if __name__ == '__main__':
    print("Bot is starting...")
    bot.infinity_polling()
