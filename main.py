import os
from service import Service
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv('.env')
tg_bot = os.getenv('TG_TOKEN')
bot = telebot.TeleBot(tg_bot)

# –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –æ–¥–∏–Ω —Ä–∞–∑
svc = Service()
print(svc.get_route(1).description)

def make_routes_keyboard(routes):
    """–§–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    markup = InlineKeyboardMarkup()
    for rid, full_name in routes.items():
        # 1) –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞–≤—ã—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if full_name.startswith('"'):
            name = full_name[1:]
        else:
            name = full_name

        # 2) –ë–µ—Ä—ë–º —á–∞—Å—Ç—å –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è (split ':' –≤–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –Ω–∞–º –Ω—É–∂–µ–Ω [0])
        label = name.split(':', 1)[0]

        btn = telebot.types.InlineKeyboardButton(text=label, callback_data=str(rid))
        markup.add(btn)
    return markup

def make_location_keyboard(route_id: int, idx: int, total: int) -> InlineKeyboardMarkup:
    """
    –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:
    ‚Äì ¬´‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è¬ª (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è),
    ‚Äì ¬´–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂¬ª (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è),
    ‚Äì ¬´üè† –í –º–µ–Ω—é¬ª (–≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤).
    """
    kb = InlineKeyboardMarkup()
    buttons = []

    if idx > 0:
        buttons.append(InlineKeyboardButton("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"loc_{route_id}_{idx-1}"))
    if idx < total - 1:
        buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂", callback_data=f"loc_{route_id}_{idx+1}"))

    # –û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    kb.row(*buttons)
    kb.add(InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back"))
    return kb

@bot.message_handler(commands=['start'])
def start_handler(message):
    routes = svc.get_routes_shortly()
    markup = make_routes_keyboard(routes)
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–ù–∞–∑–∞–¥" ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if data == "back":
        routes = svc.get_routes_shortly()
        markup = make_routes_keyboard(routes)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        return

    # 2) –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç ‚Äî —Å—Ä–∞–∑—É –ª–æ–∫–∞—Ü–∏—è 0
    if data.startswith("start_"):
        route_id = int(data.split("_", 1)[1])
        route = svc.get_route(route_id)
        # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        idx = 0
        loc = route.locations[idx]
        text = f"<b>{loc.name}</b>\n\n{loc.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}"
        if loc.history:
            text += f"\n\nüï∞ {loc.history}"
        kb = make_location_keyboard(route_id, idx, len(route.locations))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=kb
        )
        return bot.answer_callback_query(call.id)

    # 3) –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
    if data.startswith("loc_"):
        _, r, i = data.split("_", 2)
        route_id = int(r)
        idx = int(i)
        route = svc.get_route(route_id)
        loc = route.locations[idx]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ª–æ–∫–∞—Ü–∏–∏
        text = f"<b>{loc.name}</b>\n\n"
        text += loc.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        if loc.history:
            text += f"\n\nüï∞ {loc.history}"
        # –ö–Ω–æ–ø–∫–∏
        kb = make_location_keyboard(route_id, idx, len(route.locations))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=kb
        )
        return bot.answer_callback_query(call.id)

    # –ò–Ω–∞—á–µ ‚Äî —ç—Ç–æ id –º–∞—Ä—à—Ä—É—Ç–∞
    try:
        route_id = int(data)
    except ValueError:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    route = svc.get_route(route_id)
    if not route:
        bot.answer_callback_query(call.id, "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è + —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
    text = route.description or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    if route.map_link:
        text += f"\n\nüó∫ <a href=\"{route.map_link}\">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É</a>"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("‚ñ∂ –ù–∞—á–∞—Ç—å", callback_data=f"start_{route_id}")
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=False,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

if __name__ == '__main__':
    bot.infinity_polling()

